package org.emoflon.ibex.tgg.compiler.viatra.defaults;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.emoflon.ibex.tgg.compiler.defaults.DefaultFilesGenerator;
import org.moflon.core.utilities.MoflonUtil;
import org.moflon.tgg.mosl.tgg.Import;
import org.moflon.tgg.mosl.tgg.TripleGraphGrammarFile;

@SuppressWarnings("all")
public class ViatraFilesGenerator extends DefaultFilesGenerator {
  public static String generateDefaultRegHelperFile(final String projectName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package org.emoflon.ibex.tgg.run.");
    String _lowerCase = MoflonUtil.lastCapitalizedSegmentOf(projectName).toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(".config;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.ResourceSet;");
    _builder.newLine();
    _builder.append("import org.emoflon.ibex.tgg.compiler.defaults.IRegistrationHelper;");
    _builder.newLine();
    _builder.append("import org.emoflon.ibex.tgg.operational.defaults.IbexOptions;");
    _builder.newLine();
    _builder.append("import org.emoflon.ibex.tgg.operational.strategies.modules.IbexExecutable;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class _DefaultRegistrationHelper implements IRegistrationHelper{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/** Load and register source and target metamodels */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void registerMetamodels(ResourceSet rs, IbexExecutable executable) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Replace to register generated code or handle other URI-related requirements");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new ViatraRegistrationHelper().registerMetamodels(rs, executable);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/** Create default options **/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public IbexOptions createIbexOptions() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ViatraRegistrationHelper().createIbexOptions();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String generateRegHelperFile(final String projectName, final TripleGraphGrammarFile tgg) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package org.emoflon.ibex.tgg.run.");
    String _lowerCase = MoflonUtil.lastCapitalizedSegmentOf(projectName).toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(".config;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.ResourceSet;");
    _builder.newLine();
    _builder.append("import org.emoflon.ibex.tgg.operational.csp.constraints.factories.");
    String _lowerCase_1 = MoflonUtil.lastCapitalizedSegmentOf(projectName).toLowerCase();
    _builder.append(_lowerCase_1);
    _builder.append(".UserDefinedRuntimeTGGAttrConstraintFactory;");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.emoflon.ibex.tgg.operational.defaults.IbexOptions;");
    _builder.newLine();
    _builder.append("import org.emoflon.ibex.tgg.compiler.defaults.IRegistrationHelper;");
    _builder.newLine();
    _builder.append("import org.emoflon.ibex.tgg.operational.strategies.modules.IbexExecutable;");
    _builder.newLine();
    _builder.append("import org.emoflon.ibex.tgg.runtime.viatra.ViatraTGGEngine;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ViatraRegistrationHelper implements IRegistrationHelper {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/** Load and register source and target metamodels */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void registerMetamodels(ResourceSet rs, IbexExecutable executable) throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Replace to register generated code or handle other URI-related requirements");
    _builder.newLine();
    {
      EList<Import> _imports = tgg.getImports();
      for(final Import imp : _imports) {
        _builder.append("\t\t");
        _builder.append("executable.getResourceHandler().loadAndRegisterMetamodel(\"");
        String _name = imp.getName();
        _builder.append(_name, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/** Create default options **/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public IbexOptions createIbexOptions() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("IbexOptions options = new IbexOptions();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("options.blackInterpreter(new ViatraTGGEngine());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("options.project.name(\"");
    String _lastCapitalizedSegmentOf = MoflonUtil.lastCapitalizedSegmentOf(projectName);
    _builder.append(_lastCapitalizedSegmentOf, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("options.project.path(\"");
    _builder.append(projectName, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("options.debug.ibexDebug(false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("options.csp.userDefinedConstraints(new UserDefinedRuntimeTGGAttrConstraintFactory());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("options.registrationHelper(this);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return options;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
